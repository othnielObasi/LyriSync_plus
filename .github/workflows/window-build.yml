 # ----github/workflows/build.yml
name: Build Windows Installer

on:
  push:
    branches: [ main, master ]
    tags: [ '*' ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest

    env:
      # Project paths
      PROJ_DIR: ${{ github.workspace }}\lyrisync_plus
      DIST_DIR: ${{ github.workspace }}\lyrisync_plus\dist
      BUILD_DIR: ${{ github.workspace }}\lyrisync_plus\build
      # Naming (basename WITHOUT .exe for PyInstaller)
      EXE_BASENAME: LyriSyncPlus
      # Installer scripts
      NSIS_SCRIPT: ${{ github.workspace }}\lyrisync_plus\LyriSyncPlus.nsi
      INNO_SCRIPT: ${{ github.workspace }}\lyrisync_plus\installer_inno.iss

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Show structure (debug)
        shell: pwsh
        run: |
          Write-Host "Workspace: $env:GITHUB_WORKSPACE"
          Write-Host "Listing root:"
          Get-ChildItem -Force $env:GITHUB_WORKSPACE
          Write-Host "`nListing project folder:"
          Get-ChildItem -Force $env:PROJ_DIR

      - name: Install build dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          Set-Location $env:PROJ_DIR

          if (Test-Path .\requirements.txt) {
            pip install -r requirements.txt
          }

          # Ensure these are present
          pip install pyinstaller websockets aiohttp ttkbootstrap pyyaml pillow

      - name: Build with PyInstaller
        shell: pwsh
        run: |
          Set-Location $env:PROJ_DIR

          # Clean outputs
          if (Test-Path $env:DIST_DIR)  { Remove-Item -Recurse -Force $env:DIST_DIR }
          if (Test-Path $env:BUILD_DIR) { Remove-Item -Recurse -Force $env:BUILD_DIR }

          # Icon arg (short form -i is safest across versions)
          $iconArg = ""
          if (Test-Path .\iconLyriSync.ico) {
            $iconArg = "-i iconLyriSync.ico"
          }

          # Build one-file EXE (windowed app)
          # NOTE: --name expects BASENAME (no .exe)
          pyinstaller --noconfirm --onefile --clean --noconsole $iconArg --name "$env:EXE_BASENAME" main.py

          if ($LASTEXITCODE -ne 0) {
            throw "PyInstaller failed with exit code $LASTEXITCODE"
          }

          # Prepare a release folder for installers to consume
          $releaseDir = Join-Path $env:DIST_DIR $env:EXE_BASENAME
          New-Item -ItemType Directory -Force -Path $releaseDir | Out-Null

          # Built EXE location (one-file is directly under dist)
          $builtExe = Join-Path $env:DIST_DIR "$env:EXE_BASENAME.exe"
          if (-not (Test-Path $builtExe)) {
            throw "Expected EXE not found: $builtExe"
          }

          Copy-Item $builtExe $releaseDir -Force

          # Copy runtime assets if present
          if (Test-Path .\README.md)           { Copy-Item .\README.md $releaseDir -Force }
          if (Test-Path .\iconLyriSync.ico)    { Copy-Item .\iconLyriSync.ico $releaseDir -Force }
          if (Test-Path .\lyrisync_config.yaml){ Copy-Item .\lyrisync_config.yaml $releaseDir -Force }
          if (Test-Path .\requirements.txt)    { Copy-Item .\requirements.txt $releaseDir -Force }

      - name: Build NSIS installer
        shell: pwsh
        run: |
          Set-Location $env:PROJ_DIR

          $nsis = "${env:ProgramFiles(x86)}\NSIS\makensis.exe"
          if (-not (Test-Path $nsis)) {
            throw "NSIS not found at $nsis"
          }

          # Only pass Sourcedir define to avoid VERSION redefine errors
          $sourceDir = Join-Path $env:DIST_DIR $env:EXE_BASENAME
          if (-not (Test-Path $sourceDir)) {
            throw "SourceDir does not exist: $sourceDir"
          }

          & $nsis /DSOURCEDIR="$sourceDir" "$env:NSIS_SCRIPT"
          if ($LASTEXITCODE -ne 0) { throw "NSIS failed with exit code $LASTEXITCODE" }

          # If script emits to project root, collect it
          $nsisOutA = Join-Path $env:PROJ_DIR "LyriSyncPlus-Installer.exe"
          $nsisOutB = Join-Path $env:PROJ_DIR "LyriSyncPlus-NSIS.exe"
          if (Test-Path $nsisOutA) { Move-Item $nsisOutA (Join-Path $env:DIST_DIR "LyriSyncPlus-Installer-NSIS.exe") -Force }
          elseif (Test-Path $nsisOutB) { Move-Item $nsisOutB (Join-Path $env:DIST_DIR "LyriSyncPlus-Installer-NSIS.exe") -Force }

      - name: Build Inno Setup installer
        shell: pwsh
        run: |
          Set-Location $env:PROJ_DIR

          $iscc = "C:\Program Files (x86)\Inno Setup 6\ISCC.exe"
          if (-not (Test-Path $iscc)) {
            throw "Inno Setup ISCC.exe not found at $iscc"
          }

          & $iscc "$env:INNO_SCRIPT"
          if ($LASTEXITCODE -ne 0) { throw "Inno Setup failed with exit code $LASTEXITCODE" }

          # Try to collect the produced setup EXE
          $possible = Get-ChildItem -Recurse -Path $env:PROJ_DIR -Filter "LyriSyncPlus-Setup*.exe" | Select-Object -First 1
          if ($null -ne $possible) {
            Copy-Item $possible.FullName (Join-Path $env:DIST_DIR "LyriSyncPlus-Installer-Inno.exe") -Force
          }

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: LyriSyncPlus-Windows
          path: |
            ${{ env.DIST_DIR }}\${{ env.EXE_BASENAME }}\*
            ${{ env.DIST_DIR }}\LyriSyncPlus-Installer-NSIS.exe
            ${{ env.DIST_DIR }}\LyriSyncPlus-Installer-Inno.exe
          if-no-files-found: warn
