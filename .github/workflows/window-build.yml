 # ----github/workflows/build.yml
name: Build Windows Installer

on:
  push:
    branches: [ main, master ]
    tags: [ '*' ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest

    env:
      # Point to the project folder inside the repo
      PROJ_DIR: ${{ github.workspace }}\lyrisync_plus
      DIST_DIR: ${{ github.workspace }}\lyrisync_plus\dist
      BUILD_DIR: ${{ github.workspace }}\lyrisync_plus\build
      # Names we’ll use consistently
      EXE_NAME: LyriSyncPlus.exe
      NSIS_SCRIPT: ${{ github.workspace }}\lyrisync_plus\LyriSyncPlus.nsi
      INNO_SCRIPT: ${{ github.workspace }}\lyrisync_plus\installer_inno.iss

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Show structure (debug)
        shell: pwsh
        run: |
          Write-Host "Workspace: $env:GITHUB_WORKSPACE"
          Write-Host "Listing root:"
          Get-ChildItem -Force $env:GITHUB_WORKSPACE
          Write-Host "`nListing project folder:"
          Get-ChildItem -Force $env:PROJ_DIR

      - name: Install build dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          Set-Location $env:PROJ_DIR

          if (Test-Path .\requirements.txt) {
            pip install -r requirements.txt
          }

          # Always ensure we have these
          pip install pyinstaller websockets aiohttp ttkbootstrap pyyaml pillow

      - name: Build with PyInstaller
        shell: pwsh
        run: |
          Set-Location $env:PROJ_DIR

          # Clean previous outputs
          if (Test-Path $env:DIST_DIR)  { Remove-Item -Recurse -Force $env:DIST_DIR }
          if (Test-Path $env:BUILD_DIR) { Remove-Item -Recurse -Force $env:BUILD_DIR }

          # Use icon if present
          $iconArg = ""
          if (Test-Path .\iconLyriSync.ico) {
            $iconArg = "--icon iconLyriSync.ico"
          }

          # Build one-file EXE, windowed
          pyinstaller main.py --noconfirm --onefile --name "$env:EXE_NAME" --clean --noconsole $iconArg

          # Prepare a "release" folder expected by NSIS/Inno
          $releaseDir = Join-Path $env:DIST_DIR "LyriSyncPlus"
          New-Item -ItemType Directory -Force -Path $releaseDir | Out-Null

          # Move the built EXE (PyInstaller puts it in dist\LyriSyncPlus.exe if --name used)
          $builtExe = Join-Path $env:DIST_DIR $env:EXE_NAME
          if (-not (Test-Path $builtExe)) {
            # fallback if PyInstaller used a subfolder name (older behavior)
            $fallbackExe = Join-Path (Join-Path $env:DIST_DIR "main") "main.exe"
            if (Test-Path $fallbackExe) {
              Copy-Item $fallbackExe (Join-Path $releaseDir $env:EXE_NAME) -Force
            } else {
              Copy-Item $builtExe $releaseDir -Force
            }
          } else {
            Copy-Item $builtExe $releaseDir -Force
          }

          # Copy runtime assets (optional presence)
          if (Test-Path .\README.md)           { Copy-Item .\README.md $releaseDir -Force }
          if (Test-Path .\iconLyriSync.ico)    { Copy-Item .\iconLyriSync.ico $releaseDir -Force }
          if (Test-Path .\lyrisync_config.yaml){ Copy-Item .\lyrisync_config.yaml $releaseDir -Force }
          if (Test-Path .\requirements.txt)    { Copy-Item .\requirements.txt $releaseDir -Force }

      - name: Build NSIS installer
        shell: pwsh
        run: |
          Set-Location $env:PROJ_DIR

          $nsis = "${env:ProgramFiles(x86)}\NSIS\makensis.exe"
          if (-not (Test-Path $nsis)) {
            throw "NSIS not found at $nsis"
          }

          # We only pass SourceDir define to avoid VERSION re-definition error
          $sourceDir = Join-Path $env:DIST_DIR "LyriSyncPlus"
          if (-not (Test-Path $sourceDir)) {
            throw "SourceDir does not exist: $sourceDir"
          }

          & $nsis /DSOURCEDIR="$sourceDir" "$env:NSIS_SCRIPT"
          if ($LASTEXITCODE -ne 0) { throw "NSIS failed with exit code $LASTEXITCODE" }

          # Move NSIS output (if script writes to project dir)
          $nsisOut = Join-Path $env:PROJ_DIR "LyriSyncPlus-Installer.exe"
          if (Test-Path $nsisOut) {
            Move-Item $nsisOut (Join-Path $env:DIST_DIR "LyriSyncPlus-Installer-NSIS.exe") -Force
          }

      - name: Build Inno Setup installer
        shell: pwsh
        run: |
          Set-Location $env:PROJ_DIR

          $iscc = "C:\Program Files (x86)\Inno Setup 6\ISCC.exe"
          if (-not (Test-Path $iscc)) {
            throw "Inno Setup ISCC.exe not found at $iscc"
          }

          # We won’t pass version defines to avoid conflicts with your .iss
          & $iscc "$env:INNO_SCRIPT"
          if ($LASTEXITCODE -ne 0) { throw "Inno Setup failed with exit code $LASTEXITCODE" }

          # Inno output defaults to Output dir from .iss; try to collect a predictable name
          $possible = Get-ChildItem -Recurse -Path $env:PROJ_DIR -Filter "LyriSyncPlus-Setup*.exe" | Select-Object -First 1
          if ($null -ne $possible) {
            Copy-Item $possible.FullName (Join-Path $env:DIST_DIR "LyriSyncPlus-Installer-Inno.exe") -Force
          }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: LyriSyncPlus-Windows
          path: |
            ${{ env.DIST_DIR }}\LyriSyncPlus\*
            ${{ env.DIST_DIR }}\LyriSyncPlus-Installer-NSIS.exe
            ${{ env.DIST_DIR }}\LyriSyncPlus-Installer-Inno.exe
          if-no-files-found: warn
