 # ----github/workflows/build.yml
name: Build Windows Installer

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    tags:
      - 'v*'
      - 'release-*'

jobs:
  build-windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          # Move into the code directory (where requirements.txt lives)
          Set-Location "$env:GITHUB_WORKSPACE\lyrisync_plus\lyrisync_plus"
          pip install -r requirements.txt
          pip install pyinstaller

      - name: PyInstaller build
        run: |
          $Root      = "$env:GITHUB_WORKSPACE"
          $CodeDir   = Join-Path $Root 'lyrisync_plus\lyrisync_plus'
          $IconPath  = Join-Path $CodeDir 'iconLyriSync.ico'
          $Splash    = Join-Path $CodeDir 'splash.png'
          $Readme    = Join-Path $CodeDir 'README.md'
          $Cfg       = Join-Path $CodeDir 'lyrisync_config.yaml'

          Set-Location $CodeDir

          # Build exe (windowed, name LyriSyncPlus)
          # Include common hidden imports to avoid runtime missing modules
          $addDataArgs = @()
          if (Test-Path $Splash) { $addDataArgs += @('--add-data', 'splash.png;.') }
          if (Test-Path $IconPath) {
            pyinstaller --noconfirm --clean `
              --name "LyriSyncPlus" `
              --windowed `
              --icon "$IconPath" `
              --hidden-import websockets `
              --hidden-import aiohttp `
              main.py `
              @addDataArgs
          } else {
            pyinstaller --noconfirm --clean `
              --name "LyriSyncPlus" `
              --windowed `
              --hidden-import websockets `
              --hidden-import aiohttp `
              main.py `
              @addDataArgs
          }

          # Copy extras to dist folder (optional, wonâ€™t fail if missing)
          $DistApp = Join-Path $CodeDir 'dist\LyriSyncPlus'
          if (Test-Path $Readme) { Copy-Item $Readme -Destination $DistApp -Force }
          if (Test-Path $Cfg)    { Copy-Item $Cfg    -Destination $DistApp -Force }
          if (Test-Path $IconPath) { Copy-Item $IconPath -Destination $DistApp -Force }

          if (-not (Test-Path (Join-Path $DistApp 'LyriSyncPlus.exe'))) {
            Write-Error "LyriSyncPlus.exe not found in $DistApp"
            exit 1
          }

      - name: Install NSIS & Inno Setup
        run: |
          choco install nsis innosetup -y
          $nsisPath = "${env:ProgramFiles(x86)}\NSIS\makensis.exe"
          $isccPath = "${env:ProgramFiles(x86)}\Inno Setup 6\ISCC.exe"
          if (-not (Test-Path $nsisPath)) { throw "NSIS not found at $nsisPath" }
          if (-not (Test-Path $isccPath)) { throw "Inno Setup not found at $isccPath" }

      - name: Build NSIS installer
        run: |
          $Root     = "$env:GITHUB_WORKSPACE"
          $CodeDir  = Join-Path $Root 'lyrisync_plus\lyrisync_plus'
          $DistApp  = Join-Path $CodeDir 'dist\LyriSyncPlus'
          $OutDir   = Join-Path $CodeDir 'dist\installer'
          New-Item -ItemType Directory -Force -Path $OutDir | Out-Null

          $nsis = "${env:ProgramFiles(x86)}\NSIS\makensis.exe"

          # Use ref name or fallback for version stamp
          $ver = "${{ github.ref_name }}"
          if (-not $ver) { $ver = "main" }

          # NSIS script expected at repo root (LyriSyncPlus.nsi)
          $nsiScript = Join-Path $Root 'LyriSyncPlus.nsi'
          if (-not (Test-Path $nsiScript)) {
            throw "NSIS script not found at $nsiScript"
          }

          # Call NSIS with /D overrides (no double-define errors)
          & $nsis `
            "/DSourceDir=$DistApp" `
            "/DAPP_VERSION=$ver" `
            "/DOutputDir=$OutDir" `
            "$nsiScript"

          if ($LASTEXITCODE -ne 0) { throw "NSIS failed with exit code $LASTEXITCODE" }

      - name: Build Inno Setup installer
        run: |
          $Root     = "$env:GITHUB_WORKSPACE"
          $CodeDir  = Join-Path $Root 'lyrisync_plus\lyrisync_plus'
          $DistApp  = Join-Path $CodeDir 'dist\LyriSyncPlus'
          $iscc     = "${env:ProgramFiles(x86)}\Inno Setup 6\ISCC.exe"

          $ver = "${{ github.ref_name }}"
          if (-not $ver) { $ver = "main" }

          # Inno script expected at repo root (installer_inno.iss)
          $issScript = Join-Path $Root 'installer_inno.iss'
          if (-not (Test-Path $issScript)) {
            throw "Inno Setup script not found at $issScript"
          }

          & $iscc "/DSourceDir=$DistApp" "/DMyAppVersion=$ver" "$issScript"

          if ($LASTEXITCODE -ne 0) { throw "Inno Setup failed with exit code $LASTEXITCODE" }

      - name: Upload PyInstaller app (dist/LyriSyncPlus)
        uses: actions/upload-artifact@v4
        with:
          name: LyriSyncPlus-dist
          path: lyriSync_plus/lyrisync_plus/dist/LyriSyncPlus

      - name: Upload installers
        uses: actions/upload-artifact@v4
        with:
          name: LyriSyncPlus-installers
          path: |
            lyrisync_plus/lyrisync_plus/dist/installer/*.exe
            lyrisync_plus/lyrisync_plus/dist/*.exe
